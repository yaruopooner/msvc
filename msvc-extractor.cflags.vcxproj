<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="ClCompile" InitialTargets="SingleFileCompilation" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="SingleFileCompilation">
    <ItemGroup>
      <!-- backup all target files -->
      <CFLAG_TargetSourceFiles Include="@(ClCompile)"/>
      <CFLAG_TargetHeaderFiles Include="@(ClInclude)"/>

      <!-- all target files combine -->
      <CFLAG_TargetFiles Include="@(CFLAG_TargetSourceFiles)"/>
      <CFLAG_TargetFiles Include="@(CFLAG_TargetHeaderFiles)"/>

      <!-- definition and clear after store -->
      <CFLAG_TargetFilesAbs Remove="@(CFLAG_TargetFilesAbs)"/>
      
      <!-- remove all reference -->
      <ProjectReference Remove="@(ProjectReference)"/>

      <!-- remove all target files & hijack target -->
      <ClCompile Remove="@(ClCompile)"/>
      <ClCompile Include="$(CompileFile)" Condition="'$(CompileFile)' != ''"/>
      <ClCompile Include="empty.cpp" Condition="'$(CompileFile)' == ''"/>
      <ClInclude Remove="@(ClInclude)" />
      <!-- <ClInclude Include="empty.hpp" /> -->
      <!-- <SelectedFiles Remove="$(SelectedFiles)" /> -->
      <!-- <SelectedFiles Include="empty.cpp" /> -->


      <ClCompile>
        <!-- syntax check only -->
        <AdditionalOptions>/Zs</AdditionalOptions>
        <DebugInformationFormat/>
        <ProgramDataBaseFileName/>
        <!-- <ProgramDataBaseFileName>$(OutDir)</ProgramDataBaseFileName> -->
        <PrecompiledHeader>NotUsing</PrecompiledHeader>
        <UseFullPaths>false</UseFullPaths>
      </ClCompile>

      <!-- <CLTLogReadFiles Remove="@(CLTLogReadFiles)" /> -->
      <!-- <CLTLogWriteFiles Remove="@(CLTLogWriteFiles)" /> -->
      <!-- <CLTLogReadFiles Include="" /> -->
      <!-- <CLTLogWriteFiles Include="" /> -->


      <!-- CFLAG_* item metadatas create, this metadata reference by CFLAG_* item's condition -->
      <CFLAG Include="empty">
        <!-- Microsoft(R) C/C++ Optimizing Compiler Version -->
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '9.0'">15.00.30729</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '10.0'">16.00.40219</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '11.0'">17.00.61030</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '12.0'">18.00.40629</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '14.0'">19.00.24215</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' == '15.0'">19.10.25017</CompilerVersion>
        <CompilerVersion Condition="'$(VisualStudioVersion)' &gt;= '16.0'">19.20.27508</CompilerVersion>

        <!-- C++ Standard Version -->
        <CppLanguageStd Condition="'%(ClCompile.LanguageStandard)' == 'stdcpp14'">c++14</CppLanguageStd>
        <CppLanguageStd Condition="'%(ClCompile.LanguageStandard)' == 'stdcpplatest'">c++1z</CppLanguageStd>
        <CppLanguageStd Condition="('%(ClCompile.LanguageStandard)' == '') AND ('$(VisualStudioVersion)' &lt; '10.0')"></CppLanguageStd>
        <CppLanguageStd Condition="('%(ClCompile.LanguageStandard)' == '') AND ('$(VisualStudioVersion)' &gt;= '10.0')">c++11</CppLanguageStd>
        <CppLanguageStd Condition="('%(ClCompile.LanguageStandard)' == '') AND ('$(VisualStudioVersion)' &gt;= '12.0')">c++14</CppLanguageStd>
        <CppLanguageStd Condition="('%(ClCompile.LanguageStandard)' == '') AND ('$(VisualStudioVersion)' &gt;= '15.0')">c++1z</CppLanguageStd>
        <CppLanguageStd Condition="('%(ClCompile.LanguageStandard)' == '') AND ('$(VisualStudioVersion)' &gt;= '16.0')">c++17</CppLanguageStd>

        <!-- target machine architecture -->
        <TargetMachine Condition="('%(Lib.TargetMachine)' == 'MachineX64') OR ('%(ImpLib.TargetMachine)' == 'MachineX64') OR ('%(Link.TargetMachine)' == 'MachineX64') OR ('$(Platform)' == 'x64')">MachineX64</TargetMachine>
        <TargetMachine Condition="('%(Lib.TargetMachine)' == 'MachineX86') OR ('%(ImpLib.TargetMachine)' == 'MachineX86') OR ('%(Link.TargetMachine)' == 'MachineX86') OR ('$(Platform)' == 'Win32')">MachineX86</TargetMachine>
        <TargetMachine Condition="('%(Lib.TargetMachine)' == 'MachineARM') OR ('%(ImpLib.TargetMachine)' == 'MachineARM') OR ('%(Link.TargetMachine)' == 'MachineARM') OR ('$(Platform)' == 'ARM')">MachineARM</TargetMachine>
        <TargetMachine Condition="('%(Lib.TargetMachine)' == 'MachineIA64') OR ('%(ImpLib.TargetMachine)' == 'MachineIA64') OR ('%(Link.TargetMachine)' == 'MachineIA64') OR ('$(Platform)' == 'Itanium')">MachineIA64</TargetMachine>

        <!-- replace clang value -->
        <TargetCpu Condition="'%(CFLAG.TargetMachine)' == ''">x86-64</TargetCpu>
        <TargetCpu Condition="'%(CFLAG.TargetMachine)' == 'MachineX64'">x86-64</TargetCpu>
        <TargetCpu Condition="'%(CFLAG.TargetMachine)' == 'MachineX86'">i386</TargetCpu>
        <TargetCpu Condition="'%(CFLAG.TargetMachine)' == 'MachineARM'">arm</TargetCpu>
        <TargetArchitecture Condition="'%(CFLAG.TargetMachine)' == ''">x86_64</TargetArchitecture>
        <TargetArchitecture Condition="'%(CFLAG.TargetMachine)' == 'MachineX64'">x86_64</TargetArchitecture>
        <TargetArchitecture Condition="'%(CFLAG.TargetMachine)' == 'MachineX86'">i386</TargetArchitecture>
        <TargetArchitecture Condition="'%(CFLAG.TargetMachine)' == 'MachineARM'">arm</TargetArchitecture>
      </CFLAG>


      <!-- CFLAG_* item create section -->


      <!-- Syntax Control options for MSVC language extension -->
      <!-- Predefined Macros auto generation by clang cc1 option -->
      <!-- cl options convert to clang cc1 option -->

      <!-- Syntax Control -->
      <!-- Predefined Macro: __cplusplus -->
      <CFLAG_ClangCC1Options Include="-std=%(CFLAG.CppLanguageStd)"/>

      <!-- Predefined Macro: _M_X64, _M_AMD64, _M_IX86, _M_.... -->
      <!-- Predefined Macro: _WIN32, _WIN64, _INTEGRAL_MAX_BITS -->
      <CFLAG_ClangCC1Options Include="-target-cpu %(CFLAG.TargetCpu)"/>
      <CFLAG_ClangCC1Options Include="-triple %(CFLAG.TargetArchitecture)-pc-windows"/>

      <!-- Syntax Control -->
      <!-- Predefined Macro: _MSC_BUILD, __STDC__ -->
      <CFLAG_ClangCC1Options Include="-fms-compatibility"/>
      <!-- Predefined Macro: _MSC_VER, _MSC_FULL_VER -->
      <CFLAG_ClangCC1Options Include="-fms-compatibility-version=%(CFLAG.CompilerVersion)"/>

      <!-- Syntax Control -->
      <!-- Predefined Macro: _MSC_EXTENSIONS -->
      <CFLAG_ClangCC1Options Include="-fms-extensions" Condition="'%(ClCompile.DisableLanguageExtensions)' == 'false'"/>

      <!-- Syntax Control -->
      <!-- Parse templated function definitions at the end of the translation unit(for MSVC language extension) -->
      <!-- MSVC allows many invalid constructs in class templates that Clang has historically rejected.  -->
      <!-- In order to parse widely distributed headers for libraries such as  -->
      <!-- the Active Template Library (ATL) and Windows Runtime Library (WRL),  -->
      <!-- some template rules have been relaxed or extended in Clang on Windows. -->
      <!-- Use -fms-compatibility and -fdelayed-template-parsing in pairs? -->
      <CFLAG_ClangCC1Options Include="-fdelayed-template-parsing"/>

      <!-- Predefined Macro: _CPPRTTI -->
      <CFLAG_ClangCC1Options Include="-fno-rtti" Condition="'%(ClCompile.RuntimeTypeInfo)' == 'false'"/>
      <!-- Predefined Macro: _CPPUNWIND -->
      <CFLAG_ClangCC1Options Include="-fcxx-exceptions" Condition="'%(ClCompile.ExceptionHandling)' == 'SyncCThrow'"/>


      <!-- Predefined Macros manual generation -->
      <!-- Because auto generation is not supported by clang cc1 option  -->
      <CFLAG_SystemPreprocessorDefinitions Include="_ATL_VER=0x1000"/>
      <!-- <CFLAG_SystemPreprocessorDefinitions Include="_CHAR_UNSIGNED"/> -->
      <CFLAG_SystemPreprocessorDefinitions Include="__CLR_VER=0" Condition="('%(ClCompile.CompileAsManaged)' != 'false')"/>
      <CFLAG_SystemPreprocessorDefinitions Include="__cplusplus_cli=200406L" Condition="('%(ClCompile.CompileAsManaged)' == 'true') OR ('%(ClCompile.CompileAsManaged)' == 'Pure') OR ('%(ClCompile.CompileAsManaged)' == 'Safe')"/>
      <CFLAG_SystemPreprocessorDefinitions Include="__cplusplus_winrt=201009L" Condition="('%(ClCompile.CompileAsWinRT)' == 'true')"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_MT" Condition="('%(ClCompile.RuntimeLibrary)' == 'MultiThreaded') OR ('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDebug') OR ('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDLL') OR ('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDebugDLL')"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_DLL" Condition="('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDLL') OR ('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDebugDLL')"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_DEBUG" Condition="('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDebug') OR ('%(ClCompile.RuntimeLibrary)' == 'MultiThreadedDebugDLL')"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_M_IX86_FP=0" Condition="('%(ClCompile.EnableEnhancedInstructionSet)' == '') AND (('%(CFLAG.TargetMachine)' == 'MachineX86') OR ('%(CFLAG.TargetMachine)' == 'MachineX64'))"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_M_IX86_FP=1" Condition="('%(ClCompile.EnableEnhancedInstructionSet)' == 'StreamingSIMDExtensions') AND (('%(CFLAG.TargetMachine)' == 'MachineX86') OR ('%(CFLAG.TargetMachine)' == 'MachineX64'))"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_M_IX86_FP=2" Condition="('%(ClCompile.EnableEnhancedInstructionSet)' == 'StreamingSIMDExtensions2') AND (('%(CFLAG.TargetMachine)' == 'MachineX86') OR ('%(CFLAG.TargetMachine)' == 'MachineX64'))"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_M_ARM_FP" Condition="('%(ClCompile.EnableEnhancedInstructionSet)' == '') AND ('%(CFLAG.TargetMachine)' == 'MachineARM')"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_M_CEE" Condition="('%(ClCompile.CompileAsManaged)' != 'false') AND ('%(ClCompile.CompileAsManaged)' != '')"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_M_CEE_PURE" Condition="'%(ClCompile.CompileAsManaged)' == 'Pure'"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_M_CEE_SAFE" Condition="'%(ClCompile.CompileAsManaged)' == 'Safe'"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_MANAGED" Condition="'%(ClCompile.CompileAsManaged)' == 'true'"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_MFC_VER=0x0A00"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_WCHAR_T_DEFINED;_NATIVE_WCHAR_T_DEFINED" Condition="'%(ClCompile.TreatWChar_tAsBuiltInType)' == 'true'"/>
      <CFLAG_SystemPreprocessorDefinitions Include="__MSVC_RUNTIME_CHECKS" Condition="'%(ClCompile.SmallerTypeCheck)' == 'true'"/>
      <CFLAG_SystemPreprocessorDefinitions Include="_OPENMP" Condition="'%(ClCompile.OpenMPSupport)' == 'true'"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_UNICODE"/>
      <CFLAG_SystemPreprocessorDefinitions Include="UNICODE"/>

      <CFLAG_SystemPreprocessorDefinitions Include="_VC_NODEFAULTLIB" Condition="'%(ClCompile.DebugInformationFormat)' == 'EditAndContinue'"/>

      <!-- all remove check -->
      <CFLAG_SystemPreprocessorDefinitions Remove="@(CFLAG_SystemPreprocessorDefinitions)" Condition="'%(ClCompile.UndefineAllPreprocessorDefinitions)' == 'true'"/>
      
      <!-- this item exclude remove process -->
      <!-- <CFLAG_SystemPreprocessorDefinitions Include="__STDC__" Condition="'%(ClCompile.DisableLanguageExtensions)' == 'true'"/> -->


      <CFLAG_AdditionalPreprocessorDefinitions Include="%(ClCompile.PreprocessorDefinitions)"/>

      <CFLAG_UndefinePreprocessorDefinitions Include="%(ClCompile.UndefinePreprocessorDefinitions)"/>

      <CFLAG_SystemIncludePath Include="$(IncludePath)" Condition="'%(ClCompile.IgnoreStandardIncludePath)' != 'true'"/>
      <CFLAG_AdditionalIncludePath Include="%(ClCompile.AdditionalIncludeDirectories)"/>
      <CFLAG_ExcludePath Include="$(ExcludePath)"/>
      <CFLAG_ForceIncludeFiles Include="%(ClCompile.ForcedIncludeFiles)"/>

      <!-- NMake -->
      <CFLAG_AdditionalPreprocessorDefinitions Include="$(NMakePreprocessorDefinitions)" Condition="'$(NMakePreprocessorDefinitions)' != ''"/>
      <CFLAG_AdditionalIncludePath Include="$(NMakeIncludeSearchPath)" Condition="'$(NMakeIncludeSearchPath)' != ''"/>
      <CFLAG_ForceIncludeFiles Include="$(NMakeForcedIncludes)" Condition="'$(NMakeForcedIncludes)' != ''"/>


      <!-- <CFLAG_TargetFiles Include="@(CFLAG_ForceIncludeFiles)"/> -->

    </ItemGroup>
    
    <!-- convert to absolute paths -->
    <ConvertToAbsolutePath Paths="@(CFLAG_TargetFiles)">
       <Output TaskParameter="AbsolutePaths" ItemName="CFLAG_TargetFilesAbs"/>
    </ConvertToAbsolutePath>

    <ConvertToAbsolutePath Paths="@(CFLAG_SystemIncludePath)">
      <Output TaskParameter="AbsolutePaths" ItemName="CFLAG_SystemIncludePath_ConvertedAbsPath"/>
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="@(CFLAG_AdditionalIncludePath)">
       <Output TaskParameter="AbsolutePaths" ItemName="CFLAG_AdditionalIncludePath_ConvertedAbsPath"/>
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="@(CFLAG_ExcludePath)">
       <Output TaskParameter="AbsolutePaths" ItemName="CFLAG_ExcludePath_ConvertedAbsPath"/>
    </ConvertToAbsolutePath>
    <ConvertToAbsolutePath Paths="@(CFLAG_ForceIncludeFiles)">
       <Output TaskParameter="AbsolutePaths" ItemName="CFLAG_ForceIncludeFiles_ConvertedAbsPath"/>
    </ConvertToAbsolutePath>

    <!-- remove duplicates paths -->
    <RemoveDuplicates Inputs="@(CFLAG_SystemIncludePath_ConvertedAbsPath)">
      <Output TaskParameter="Filtered" ItemName="CFLAG_SystemIncludePath_Normalized"/>
    </RemoveDuplicates>
    <RemoveDuplicates Inputs="@(CFLAG_AdditionalIncludePath_ConvertedAbsPath)">
      <Output TaskParameter="Filtered" ItemName="CFLAG_AdditionalIncludePath_Normalized"/>
    </RemoveDuplicates>
    <RemoveDuplicates Inputs="@(CFLAG_ExcludePath_ConvertedAbsPath)">
      <Output TaskParameter="Filtered" ItemName="CFLAG_ExcludePath_Normalized"/>
    </RemoveDuplicates>
    <RemoveDuplicates Inputs="@(CFLAG_ForceIncludeFiles_ConvertedAbsPath)">
      <Output TaskParameter="Filtered" ItemName="CFLAG_ForceIncludeFiles_Normalized"/>
    </RemoveDuplicates>

    <ItemGroup>
      <!-- remove unnormalize path -->
      <CFLAG_SystemIncludePath Remove="@(CFLAG_SystemIncludePath)"/>
      <CFLAG_AdditionalIncludePath Remove="@(CFLAG_AdditionalIncludePath)"/>
      <CFLAG_ExcludePath Remove="@(CFLAG_ExcludePath)"/>
      <CFLAG_ForceIncludeFiles Remove="@(CFLAG_ForceIncludeFiles)"/>

      <!-- store normalized path -->
      <CFLAG_SystemIncludePath Include="@(CFLAG_SystemIncludePath_Normalized)"/>
      <CFLAG_AdditionalIncludePath Include="@(CFLAG_AdditionalIncludePath_Normalized)"/>
      <CFLAG_ExcludePath Include="@(CFLAG_ExcludePath_Normalized)"/>
      <CFLAG_ForceIncludeFiles Include="@(CFLAG_ForceIncludeFiles_Normalized)"/>

      <!-- replace path separator \ to / -->
      <!-- <CFLAG_SystemIncludePath Include="$([System.Text.RegularExpressions.Regex]::Replace( &apos;@(CFLAG_SystemIncludePath_Normalized)&apos;, &quot;\\+&quot;, &quot;/&quot; ))"/> -->
      <!-- <CFLAG_AdditionalIncludePath Include="$([System.Text.RegularExpressions.Regex]::Replace( &apos;@(CFLAG_AdditionalIncludePath_Normalized)&apos;, &quot;\\+&quot;, &quot;/&quot; ))"/> -->
      <!-- <CFLAG_ExcludePath Include="$([System.Text.RegularExpressions.Regex]::Replace( &apos;@(CFLAG_ExcludePath_Normalized)&apos;, &quot;\\+&quot;, &quot;/&quot; ))"/> -->
      <!-- <CFLAG_ForceIncludeFiles Include="$([System.Text.RegularExpressions.Regex]::Replace( &apos;@(CFLAG_ForceIncludeFiles_Normalized)&apos;, &quot;\\+&quot;, &quot;/&quot; ))"/> -->

      <!-- generate clang options -->
      <CFLAG_ClangCC1Options Include="-I%(CFLAG_SystemIncludePath.Identity)" Condition="'@(CFLAG_SystemIncludePath)' != ''"/>
      <CFLAG_ClangCC1Options Include="-I%(CFLAG_AdditionalIncludePath.Identity)" Condition="'@(CFLAG_AdditionalIncludePath)' != ''"/>
      <CFLAG_ClangCC1Options Include="-include %(CFLAG_ForceIncludeFiles.Identity)" Condition="'@(CFLAG_ForceIncludeFiles)' != ''"/>
      <CFLAG_ClangCC1Options Include="-D %(CFLAG_SystemPreprocessorDefinitions.Identity)" Condition="'@(CFLAG_SystemPreprocessorDefinitions)' != ''"/>
      <CFLAG_ClangCC1Options Include="-D %(CFLAG_AdditionalPreprocessorDefinitions.Identity)" Condition="'@(CFLAG_AdditionalPreprocessorDefinitions)' != ''"/>
      <CFLAG_ClangCC1Options Include="-U %(CFLAG_UndefinePreprocessorDefinitions.Identity)" Condition="'@(CFLAG_UndefinePreprocessorDefinitions)' != ''"/>
    </ItemGroup>

    <!-- output message to STDOUT for msvc-flags's parser -->
    <Message Text="--------------------CL Details--------------------"/>
    <Message Text="#CFLAG#:VisualStudioVersion:$(VisualStudioVersion)"/>
    <Message Text="#CFLAG#:IncludePath:$(IncludePath)"/>
    <Message Text="#CFLAG#:ClCompile.AdditionalIncludeDirectories:%(ClCompile.AdditionalIncludeDirectories)"/>
    <Message Text="#CFLAG#:ClCompile.AdditionalUsingDirectories:%(ClCompile.AdditionalUsingDirectories)"/>
    <Message Text="#CFLAG#:ExcludePath:$(ExcludePath)"/>
    <Message Text="#CFLAG#:ReferencePath:$(ReferencePath)"/>
    <Message Text="#CFLAG#:ClCompile.ForcedIncludeFiles:%(ClCompile.ForcedIncludeFiles)"/>
    <Message Text="#CFLAG#:ClCompile.ForcedUsingFiles:%(ClCompile.ForcedUsingFiles)"/>
    <Message Text="#CFLAG#:ClCompile.AdditionalOptions:%(ClCompile.AdditionalOptions)"/>

    <Message Text="#CFLAG#:ClCompile.UndefineAllPreprocessorDefinitions:%(ClCompile.UndefineAllPreprocessorDefinitions)"/>
    <Message Text="#CFLAG#:ClCompile.IgnoreStandardIncludePath:%(ClCompile.IgnoreStandardIncludePath)"/>

    <Message Text="#CFLAG#:ClCompile.ExceptionHandling:%(ClCompile.ExceptionHandling)"/>

    <Message Text="#CFLAG#:ClCompile.DisableLanguageExtensions:%(ClCompile.DisableLanguageExtensions)"/>

    <Message Text="#CFLAG#:ClCompile.EnableEnhancedInstructionSet:%(ClCompile.EnableEnhancedInstructionSet)"/>
    <Message Text="#CFLAG#:ClCompile.PreprocessorDefinitions:%(ClCompile.PreprocessorDefinitions)"/>

    <Message Text="#CFLAG#:ClCompile.RuntimeLibrary:%(ClCompile.RuntimeLibrary)"/>

    <Message Text="#CFLAG#:ClCompile.TreatWChar_tAsBuiltInType:%(ClCompile.TreatWChar_tAsBuiltInType)"/>

    <Message Text="#CFLAG#:ClCompile.UndefinePreprocessorDefinitions:%(ClCompile.UndefinePreprocessorDefinitions)"/>

    <Message Text="#CFLAG#:ClCompile.RuntimeTypeInfo:%(ClCompile.RuntimeTypeInfo)"/>

    <Message Text="#CFLAG#:ClCompile.PreprocessSuppressLineNumbers:%(ClCompile.PreprocessSuppressLineNumbers)"/>
    <Message Text="#CFLAG#:ClCompile.PreprocessToFile:%(ClCompile.PreprocessToFile)"/>
    <Message Text="#CFLAG#:ClCompile.CompileAs:%(ClCompile.CompileAs)"/>
    <Message Text="#CFLAG#:ClCompile.CompileAsManaged:%(ClCompile.CompileAsManaged)"/>
    <Message Text="#CFLAG#:ClCompile.SmallerTypeCheck:%(ClCompile.SmallerTypeCheck)"/>
    <Message Text="#CFLAG#:ClCompile.OpenMPSupport:%(ClCompile.OpenMPSupport)"/>
    <Message Text="#CFLAG#:ClCompile.DebugInformationFormat:%(ClCompile.DebugInformationFormat)"/>

    <Message Text="#CFLAG#:ClCompile.PrecompiledHeader:%(ClCompile.PrecompiledHeader)"/>
    <Message Text="#CFLAG#:ClCompile.PrecompiledHeaderFile:%(ClCompile.PrecompiledHeaderFile)"/>

    <Message Text="#CFLAG#:ClCompile.LanguageStandard:%(ClCompile.LanguageStandard)"/>
    <Message Text="#CFLAG#:ClCompile.CppLanguageStd:%(ClCompile.CppLanguageStd)"/>

    <!-- <Message Text="#CFLAG#:Midl.CPreprocessOptions:%(Midl.CPreprocessOptions)" Condition="'%(Midl.CPreprocessOptions)' != '' AND '%(Midl.CPreprocessOptions)' != 'false'" /> -->
    <Message Text="#CFLAG#:Midl.CPreprocessOptions:%(Midl.CPreprocessOptions)"/>
    <Message Text="#CFLAG#:Midl.PreprocessorDefinitions:%(Midl.PreprocessorDefinitions)"/>
    <Message Text="#CFLAG#:Midl.UndefinePreprocessorDefinitions:%(Midl.UndefinePreprocessorDefinitions)"/>
    <!-- <Message Text="#CFLAG#:"/> -->

    <Message Text="#CFLAG#:Lib.TargetMachine:%(Lib.TargetMachine)"/>
    <Message Text="#CFLAG#:ImpLib.TargetMachine:%(ImpLib.TargetMachine)"/>
    <Message Text="#CFLAG#:Link.TargetMachine:%(Link.TargetMachine)"/>

    <Message Text="--------------------Clang Details--------------------"/>
    <!-- CFLAG_* key begin -->
    <Message Text="#CFLAG#:CFLAG_CompilerVersion:%(CFLAG.CompilerVersion)"/>
    <Message Text="#CFLAG#:CFLAG_CppLanguageStd:%(CFLAG.CppLanguageStd)"/>
    <Message Text="#CFLAG#:CFLAG_TargetMachine:%(CFLAG.TargetMachine)"/>

    <Message Text="#CFLAG#:CFLAG_ClangCC1Options:@(CFLAG_ClangCC1Options)"/>
    <Message Text="#CFLAG#:CFLAG_SystemPreprocessorDefinitions:@(CFLAG_SystemPreprocessorDefinitions)"/>
    <Message Text="#CFLAG#:CFLAG_AdditionalPreprocessorDefinitions:@(CFLAG_AdditionalPreprocessorDefinitions)"/>
    <Message Text="#CFLAG#:CFLAG_UndefinePreprocessorDefinitions:@(CFLAG_UndefinePreprocessorDefinitions)"/>
    <Message Text="#CFLAG#:CFLAG_SystemIncludePath:@(CFLAG_SystemIncludePath)"/>
    <Message Text="#CFLAG#:CFLAG_AdditionalIncludePath:@(CFLAG_AdditionalIncludePath)"/>
    <Message Text="#CFLAG#:CFLAG_ExcludePath:@(CFLAG_ExcludePath)"/>
    <Message Text="#CFLAG#:CFLAG_ForceIncludeFiles:@(CFLAG_ForceIncludeFiles)"/>
    <Message Text="#CFLAG#:CFLAG_TargetSourceFiles:@(CFLAG_TargetSourceFiles)"/>
    <Message Text="#CFLAG#:CFLAG_TargetHeaderFiles:@(CFLAG_TargetHeaderFiles)"/>
    <Message Text="#CFLAG#:CFLAG_TargetFilesAbs:@(CFLAG_TargetFilesAbs)"/>
    <!-- CFLAG_* key end -->


    <!-- <Message Text="#CFLAG#:ProjectConfiguration.Platform:%(ProjectConfiguration.Platform)" Condition="'%(ProjectConfiguration.Identity)'=='$(Configuration)|$(Platform)'"/> -->
    <!-- <Message Text="#CFLAG#:ProjectConfiguration.Configuration:%(ProjectConfiguration.Configuration)" Condition="'%(ProjectConfiguration.Identity)'=='$(Configuration)|$(Platform)'"/> -->
  </Target>
 
  <!-- <PropertyGroup> -->
  <!--  <BuildSteps> -->
  <!--     SetBuildDefaultEnvironmentVariables; -->
  <!--     SetUserMacroEnvironmentVariables; -->
  <!--     ResolveReferences; -->
  <!--     PrepareForBuild; -->
  <!--     InitializeBuildStatus; -->
  <!--     BuildGenerateSources; -->
  <!--     BuildCompile; -->
      <!-- BuildLink; -->
  <!--  </BuildSteps> -->
  <!-- </PropertyGroup> -->


  <!-- import original project file -->
  <Import Project="$(ImportProjectFile)" />

  <!-- <ItemDefinitionGroup> -->
  <!--   <Link> -->
  <!--     <NoEntryPoint>true</NoEntryPoint> -->
  <!--     <AdditionalOptions>/DLL</AdditionalOptions> -->
  <!--     <AdditionalDependencies></AdditionalDependencies> -->
  <!--   </Link> -->
  <!-- </ItemDefinitionGroup> -->
  <!-- <PropertyGroup Label="Configuration"> -->
  <!--   <ConfigurationType>DynamicLibrary</ConfigurationType> -->
  <!--   <PlatformToolset>v120</PlatformToolset> -->
  <!-- </PropertyGroup> -->
  <!-- <Target Name="FinalReport"> -->
  <!--   <Message Text="Final Report"/> -->
  <!--   <Message Text="#CFLAG#:Midl.CPreprocessOptions:%(Midl.CPreprocessOptions)"/> -->
  <!--   <Message Text="#CFLAG#:Midl.PreprocessorDefinitions:%(Midl.PreprocessorDefinitions)"/> -->
  <!--   <Message Text="#CFLAG#:Midl.UndefinePreprocessorDefinitions:%(Midl.UndefinePreprocessorDefinitions)"/> -->
  <!--   <Message Text="#CFLAG#:Lib.TargetMachine:%(Lib.TargetMachine)"/> -->
  <!--   <Message Text="#CFLAG#:ImpLib.TargetMachine:%(ImpLib.TargetMachine)"/> -->
  <!--   <Message Text="#CFLAG#:Link.TargetMachine:%(Link.TargetMachine)"/> -->
  <!-- </Target> -->
</Project>
